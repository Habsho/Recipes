{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calories","persons","image","dietlabel","ingredients","healthLabels","className","src","alt","map","ingredient","i","key","text","Math","round","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","async","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","yield","dietLabels","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uNAgDeA,G,MA9CA,SAAC,GAQT,IAPLC,EAOI,EAPJA,MACAC,EAMI,EANJA,SACAC,EAKI,EALJA,QACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEA,OACE,6BACE,yBAAKC,UAAU,sBACb,yBAAKA,UAAU,0DACb,yBACEA,UAAU,4BACVC,IAAKL,EACLM,IAAI,eAGR,yBAAKF,UAAU,sEACb,4BAAQA,UAAU,mBAAmBP,GACrC,yBAAKO,UAAU,iBACb,2BAAOA,UAAU,eACf,+BACGF,EAAYK,KAAI,SAACC,EAAYC,GAAb,OACf,wBAAIC,IAAKD,GACP,4BAAKD,EAAWG,aAM1B,6BACE,uBAAGP,UAAU,uBAAb,aACaQ,KAAKC,MAAMf,IAExB,uBAAGM,UAAU,uBAAb,aAA8CL,EAA9C,KACA,uBAAGK,UAAU,oBAAoBH,GACjC,uBAAGG,UAAU,uBAAuBD,SC4BjCW,EAhEH,WACV,IADgB,EAIcC,mBAAS,IAJvB,mBAITC,EAJS,KAIAC,EAJA,OAKYF,mBAAS,IALrB,mBAKTG,EALS,KAKDC,EALC,OAMUJ,mBAAS,WANnB,mBAMTK,EANS,KAMFC,EANE,KAQhBC,qBAAU,WACRC,MAEC,CAACH,IAEJ,IAAMG,EAAa,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACME,MAAM,mCAAD,OACSN,EADT,mBAbf,WAae,oBAZd,sCAWG,cACXO,EADW,kBAAAH,EAAA,MAIEG,EAASC,QAJX,OAIXC,EAJW,OAKjBZ,EAAWY,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MANA,sCAmBnB,OACE,yBAAK1B,UAAU,OACb,0BAAM6B,SARQ,SAAAC,GAChBA,EAAEC,iBACFd,EAASH,GACTC,EAAU,KAKmBf,UAAU,eACnC,2BACEA,UAAU,aACVgC,KAAK,OACLC,MAAOnB,EACPoB,SAjBa,SAAAJ,GACnBf,EAAUe,EAAEK,OAAOF,UAkBf,4BAAQjC,UAAU,gBAAgBgC,KAAK,UAAvC,WAKF,yBAAKhC,UAAU,IACZY,EAAQT,KAAI,SAAAiC,GAAM,OACjB,kBAAC,EAAD,CACE9B,IAAK8B,EAAOA,OAAOC,MACnB5C,MAAO2C,EAAOA,OAAOC,MACrB3C,SAAU0C,EAAOA,OAAO1C,SACxBE,MAAOwC,EAAOA,OAAOxC,MACrBE,YAAasC,EAAOA,OAAOtC,YAC3BH,QAASyC,EAAOA,OAAOE,MACvBzC,UAAWuC,EAAOA,OAAOG,WAAW,GACpCxC,aAAcqC,EAAOA,OAAOrC,aAAa,WChDjCyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.99fe0cc6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Recipe = ({\n  title,\n  calories,\n  persons,\n  image,\n  dietlabel,\n  ingredients,\n  healthLabels\n}) => {\n  return (\n    <div>\n      <div className=\"row m-4 p-3 shadow\">\n        <div className=\"col-4 d-flex justify-content-center align-items-center\">\n          <img\n            className=\"recipe-img rounded-circle\"\n            src={image}\n            alt=\"Card  cap\"\n          />\n        </div>\n        <div className=\"col-8 d-flex justify-content-center align-items-center flex-column\">\n          <button className=\"btn btn-danger \">{title}</button>\n          <div className=\"card-text p-2\">\n            <table className=\"text-center\">\n              <tbody>\n                {ingredients.map((ingredient, i) => (\n                  <tr key={i}>\n                    <td>{ingredient.text}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          <div>\n            <p className=\"btn btn-primary m-1\">\n              Calories: {Math.round(calories)}\n            </p>\n            <p className=\"btn btn-warning m-1\">Servings: {persons} </p>\n            <p className=\"btn m-1 btn-info\">{dietlabel}</p>\n            <p className=\"btn m-1 btn-success\">{healthLabels}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Recipe from \"./Recipe\";\n\nconst App = () => {\n  const APP_ID = \"a0da514d\";\n  const APP_KEY = \"09c62258fa2a2bbfa290144ade5dbffb\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n\n  useEffect(() => {\n    getRecipes();\n    // eslint-disable-next-line\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          value={search}\n          onChange={updateSearch}\n        />\n        <button className=\"search-button\" type=\"submit\">\n          search\n        </button>\n      </form>\n\n      <div className=\"\">\n        {recipes.map(recipe => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n            persons={recipe.recipe.yield}\n            dietlabel={recipe.recipe.dietLabels[0]}\n            healthLabels={recipe.recipe.healthLabels[1]}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}